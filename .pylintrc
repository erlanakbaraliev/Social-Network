[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().

# this is needed so that we can run run_linters.sh from utils folder,
# without editing the sys.path in the script
init-hook='from pathlib import Path;import sys;sys.path.append(Path(Path.cwd().parent, "apps").as_posix())'

ignore=.git,.msci,doc,static,htmlcov,docker,migrations,venv

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=pylint.extensions.bad_builtin

disable=C0111,I0011,E1101,R0801,R1705,W1203,R1735,C0209,W0707,R0917
enable=similarities

# C0111     missing-docstring       Our priority is to make the code document
#                                   itself. Docstring is required only when
#                                   the signature is not enough to tell
#                                   everything important.
#
# E1101     no-member               Used when a variable is accessed for a
#                                   nonexistent member.
#                                   Reason: Too many false positives
#
# I0011     locally-disabled        Disabling a Pylint warning is always the
#                                   result of a decision, no additional notification
#                                   is required to tell us what we did.
#
# C0330     bad-continuation        Too many false positives.
#
# R0801     duplicate-code          Most of the issues reported as duplicate code are in fact import
#                                   sections. Because of this many false positives were reported.
#
# R1705     no-else-return          It is a matter of choice to add else to condition or not
#                                   we do not want to enforce the no else return cases
#
# W1203     logging-fstring-interpolation  Using new style formatting enhances readability and consistency
#                                          across project files - if using fstrings becomes a bottleneck
#                                          we might need to revisit (https://github.com/PyCQA/pylint/issues/1788)
#
# R1735     use-dict-literal        Emitted when using dict() to create a dictionary instead of a literal '{ ... }'. 
#                                   The literal is faster as it avoids an additional function call.
#
# C0209     consider-using-f-string Used when we detect a string that is being formatted with format() or % which could potentially be an f-string.
#                                   The use of f-strings is preferred.
#
# W0707     raise-missing-from      When you raise a new exception after another exception was caught it's likely that the second exception is a friendly re-wrapping of the first exception
#                                   In such cases `raise from` provides a better link between the two tracebacks in the final error.
#
# R0917     too-many-positional-arguments   If your function requires many arguments to be passed by position, itâ€™s harder to read and easier to misuse. 
#                                           greet(name="Alice", message="Hello")  # passed by keyword. If this error is enabled, it will require to pass args by keyword


; C0111 is renamed (https://pylint.readthedocs.io/en/stable/user_guide/messages/convention/missing-docstring.html)
; C0330 deprecated as of 2023 (https://github.com/pylint-dev/pylint/pull/3571)


[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
#output-format=parseable

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
; files-output=no

# Tells whether to display a full report or only the messages
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=5

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no

[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching the beginning of the name of dummy variables
# (i.e. not used).
# for _ in range(5):
#    pass
# dummy_word = "pengiun"
# the above won't be flagged as a pylint error
dummy-variables-rgx=_$|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=


[BASIC]

# List of builtins function names that should not be used, separated by a comma
bad-functions=map,filter,apply,input

# Regular expression which should only match correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression which should only match correct module level names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression which should only match correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression which should only match correct function names
# Private functions are allowed to have nice explanatory names
function-rgx=(([a-z][a-z0-9_]{2,30})|(__?[a-z_0-9]{2,70}))$

# Regular expression which should only match correct method names
# Private methods and BDD-style xUnit test methods and data_provider methods
# are allowed to have nice explanatory names
method-rgx=((_?[a-z][a-z0-9_]{2,37})|((__|provide_)[a-z_0-9]{2,70})|((test|assert)[a-z0-9_]{2,100})|(setUp|tearDown))$

# Regular expression which should only match correct instance attribute names
# Private instance attribute names are allowed to have nice explanatory names
# The unittest module uses camelCase for some useful properties, they are allowed
attr-rgx=((_?[a-z][a-z0-9_]{2,35})|(__[a-z_0-9]{2,70}))$

# Regular expression which should only match correct argument names
# Type annotated short argument names are okay
argument-rgx=[a-z_][a-z0-9_]{0,35}$

# Regular expression which should only match correct variable names
variable-rgx=[a-z_][a-z0-9_]{1,35}$

# Regular expression which should only match correct attribute names in class
# bodies
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,70}|(__.*__))$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,f,ip,ha,hw,ca,urlpatterns,app_name,application

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata,tmp,tmp2

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=__.*__

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=120

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=SQLObject

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent

[DESIGN]

# Maximum number of arguments for function / method
max-args=5

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=15

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Minimum number of public methods for a class (see R0903).
min-public-methods=0

# Maximum number of public methods for a class (see R0904).
# Classes inheriting from unittest.TestCase may have more than 50 methods
max-public-methods=100


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=pylint_import_graph.dot

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=pylint_ext_import-graph.dot

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=pylint_int_import-graph.dot


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,set_up,setUp,_initialize

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=builtins.Exception

